// Imports
#include "../lib/huffmate/src/tokens/ERC721.huff"


// Interface
#define function mintToken() payable returns ()
#define function whiteListMinters() nonpayable returns()
#define function getWhiteListedTokeIDForAddress(address) view returns(uint256)
#define function tokenURI(uint256) view returns (string) 

// TODO: custom errors, whitelisting with corresponding tokenIds, tokenURI
// TODO: soulBoundMigration, maybe.

// constants
// #define constant TOKENID_TRACKING_LOCATION = FREE_STORAGE_POINTER()
// #define constant ONE_TIME_MINTING_MAPPING_LOC = FREE_STORAGE_POINTER()
#define constant ADDRESS_TO_TOKENID_MAPPING_LOCATION = FREE_STORAGE_POINTER()
#define constant TOKENURI_LOCATION = FREE_STORAGE_POINTER()

// #define constant TOKEN_URI_BASE = 0x68747470733a2f2f746f6d61746f2d67656f67726170686963616c2d7069672d3930342e6d7970696e6174612e636c6f75642f697066732f516d66416e50645054616f647a31346d7269674b55466e566364534a6a4c76684e69326171466f6d594765725046 // "https://tomato-geographical-pig-904.mypinata.cloud/ipfs/QmfAnPdPTaodz14mrigKUFnVcdSJjLvhNi2aqFomYGerPF"
#define constant TOKEN_URI_1 = 0x68747470733a2f2f746f6d61746f2d67656f67726170686963616c2d7069672d
#define constant TOKEN_URI_2 = 0x7069672d3930342e6d7970696e6174612e636c6f75642f697066732f516d6641
#define constant TOKEN_URI_3 = 0x6e50645054616f647a31346d7269674b55466e566364534a6a4c76684e693261
#define constant TOKEN_URI_4 = 0x71466f6d59476572504600000000000000000000000000000000000000000000
// ERROR Constants
// #define constant CANT_MINT_TWICE_MESSAGE = 0x43414e545f4d494e545f54574943450000000000000000000000000000000000
// #define constant CANT_MINT_TWICE_LENGTH = 0x0f


#define macro WHITELIST() = takes(0) returns(0){
    0x01 0xe487E70718cc0C71117e4852C90814A5CF0F3136 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x02 0x50DF0af8a06f82fCcB0aCb77D8c986785b36d734 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x03 0x7B5A0b267A1D4c744026b4811787e2898AAe4764 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x04 0xCE7c5b4e28D26e88eaF12d19b7E920AF332fe6d6 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x05 0xDeb8D7aA52A7A75B33543536BfCcAe840be24E6a [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x06 0x12896191de42EF8388f2892Ab76b9a728189260A [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x07 0x9d1aAF184154E9d6Fc7d138Ee560134732427f7E [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x08 0xcF78399B272E71F23F00b453005e9ba0EFa9FcDc [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x09 0x7883ecac38077d95e850288A10b4d541448008a7 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0a 0xc34f95BC9DA5054DfD0116F0AaF5b8703D2c05bd [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0b 0x24548ce576B6F7aD0222C44BD113B5D196B46B2C [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0c 0x5f653deaf00e2681254ddA011E8738C289867C55 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0d 0x5bc1F05F6538947cf2E6B306324Ec434eae9dCA8 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0e 0xb4cdE5B28C6894E3ddF4F8C79F956D395263C3Bf [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x0f 0x8988b981ACA6889a2A0336BaFaaa7cc34898eb77 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x10 0x5939F00372B62877D9F46f5AB9881402D8006377 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x11 0x3E259685A7b778dE2a8DbdF836659c4011cCAb9e [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x12 0x95eAEb306Ed38493350Ea6d7E4ecaeB03167d1EE [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x13 0xa829A3ccb0D2133b9269225870Ffd875186a0Ba2 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x14 0x36e3C5bD543c22B5bf935F1c0cd76D9A39CAC2Ea [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x15 0xaEadBbc416D1bb7d67a885C1Fbec974a65865e27 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x16 0x453737C505e666d31BCB878818afE5a4986997bF [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x17 0xc46d1B9Eb264De17106cBa44e9c449969AfbcBe8 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x18 0x491aE4A7bE91BB6b84232bAC79A9Cd5AB017E715 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x19 0xd17266057470A096ea346aB6302F5B0187c29c2F [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x1a 0x17717c0A00106657aE5675Fb3200864D7C5e05bB [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    0x1b 0xB58453da52837E5D848f667e3083F32DD991f0A6 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)


    /// @dev Testing Addresses, remove when deploying.
    // address user1
    0x45 0x233F20a935E25f6c993a71F72cCBE72c79A1F7FC [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    // address user2
    0x2a 0x8993e8FD026fC11Ad77fB612fB3175C4c0C55330 [ADDRESS_TO_TOKENID_MAPPING_LOCATION] STORE_ELEMENT_FROM_KEYS(0x00)
    stop
}

#define macro GET_WHITELISTED_TOKEN_ID() = takes(0) returns(0){
    0x04 calldataload                              // [address]
    [ADDRESS_TO_TOKENID_MAPPING_LOCATION]          // [mapping location, address]
    LOAD_ELEMENT_FROM_KEYS(0x00)                   // [tokenid]
    0x00 mstore
    0x20 0x00 return
}




#define macro CONSTRUCTOR() = takes (0) returns (0) {
    ERC721_CONSTRUCTOR()
}


// #define macro MINT_TOKEN() = takes(0) returns(0) {
//     caller [ONE_TIME_MINTING_MAPPING_LOC]       // [one_time_mapping_slot, msg.sender]
//     LOAD_ELEMENT_FROM_KEYS(0x00)                // [whether caller has minted before: true/false]
//     alreadyMintedJump jumpi
//     pop                                         // [true/false] gets popped? Works without it too
//     [TOKENID_TRACKING_LOCATION] sload           // [unused tokenid]
//     dup1 caller                                 // [msg.sender, unused tokenid, unused tokenid]
//     _MINT()                                     // [unused tokenId]
//     0x01 add                                    // [unused tokenId +1(updated tokenid)]
//     [TOKENID_TRACKING_LOCATION] sstore          // []
//     0x01 caller [ONE_TIME_MINTING_MAPPING_LOC]  // [one_time_mapping_slot, msg.sender, true]
//     STORE_ELEMENT_FROM_KEYS(0x00)               // []
//     stop
//     alreadyMintedJump: 0x00 0x00 revert          // dumb revert for now. TODO: custom error

// }

#define macro MINT_FOR_WHITELISTED() = takes(0) returns(0) {
    // caller only takes 2 gas, dup1 takes 3 gas. Better to call caller than use dup1 if possible
    
    // caller [ONE_TIME_MINTING_MAPPING_LOC]       // [one_time_mapping_slot, msg.sender]
    // LOAD_ELEMENT_FROM_KEYS(0x00)
    // // alreadyMintedJump jumpi
    // [CANT_MINT_TWICE_MESSAGE]
    // [CANT_MINT_TWICE_LENGTH]
    // dup2 REQUIRE()
    ///@dev you don't need to ensure one time minting, since the tokenid passed in for an address is always the same.
    /// @dev it will throw the 'already_minted' message at second try. Non-whitelisted can't mint anyway
    caller [ADDRESS_TO_TOKENID_MAPPING_LOCATION]
    LOAD_ELEMENT_FROM_KEYS(0x00)                //[tokenid_from_whitelist]
    dup1 iszero notWhiteListedJump jumpi        // [tokenid_from_whitelist, tokenid_from_whitelist]
    caller                                      // [msg.sender,tokenid]
    _MINT()
    // ensure one time minting
    // 0x01 caller [ONE_TIME_MINTING_MAPPING_LOC]  // [one_time_mapping_slot, msg.sender, true]
    // STORE_ELEMENT_FROM_KEYS(0x00)               // []
    stop

    // revert if caller is not whitelisted, i.e if the tokenId for the caller is zero 
    notWhiteListedJump: 0x00 0x00 revert        
}




#define macro BURN() = takes(0) returns(0) {
    ///@notice can't burn. Once minted is minted!
    0x00 0x00 revert
}

#define macro STATIC_TOKEN_URI() = takes(0) returns(0) {
    [TOKEN_URI_1] 0x00 mstore
    [TOKEN_URI_2] 0x20 mstore
    [TOKEN_URI_3] 0x40 mstore
    [TOKEN_URI_4] 0x60 mstore
    0x6a 0x00 return
}


#define macro MAIN() = takes(0) returns(0){
    0x00 calldataload 0xe0 shr                  // function selector


    //////////////////////////////
    //////////////////////////////
    //// Huffmate Dispatch ///////
    //////////////////////////////
    //////////////////////////////

    dup1 __FUNC_SIG(mintToken)                       eq mint_jump jumpi
    dup1 __FUNC_SIG(burn)                       eq burn_jump jumpi

    // dup1 __FUNC_SIG("safeMint(address,uint256)") eq safe_mint jumpi
    // dup1 __FUNC_SIG("safeMint(address,uint256,bytes)") eq safe_mint_with_data jumpi

    dup1 __FUNC_SIG(approve)                    eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll)          eq setApprovalForAll jumpi

    dup1 __FUNC_SIG(transferFrom)               eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom)           eq safeTransferFrom jumpi

    dup1 __FUNC_SIG(name)                       eq name jumpi
    dup1 __FUNC_SIG(symbol)                     eq symbol jumpi
    dup1 __FUNC_SIG(tokenURI)                   eq tokenURI jumpi
    dup1 __FUNC_SIG(supportsInterface)          eq supportsInterface jumpi

    dup1 __FUNC_SIG(getApproved)                eq getApproved jumpi
    dup1 __FUNC_SIG(isApprovedForAll)           eq isApprovedForAll jumpi

    dup1 __FUNC_SIG(balanceOf)                  eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf)                    eq ownerOf jumpi
    dup1 __FUNC_SIG(whiteListMinters)           eq whiteListJump jumpi
    dup1 __FUNC_SIG(getWhiteListedTokeIDForAddress) eq readWhiteListJump jumpi

    
    
    
    0x00 dup1 revert                            // revert if none of the function selectors match. No fallback


    // mint_jump:
    //     MINT_TOKEN()
    mint_jump:
        MINT_FOR_WHITELISTED()
    burn_jump:
        BURN()

    whiteListJump:
        WHITELIST()

    readWhiteListJump:
        GET_WHITELISTED_TOKEN_ID()

    approve:
        APPROVE()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()
    safeTransferFromData:
        SAFE_TRANSFER_FROM_WITH_DATA()

    name:
        NAME()
    symbol:
        SYMBOL()
    tokenURI:
        STATIC_TOKEN_URI()
    supportsInterface:
        SUPPORTS_INTERFACE()

    getApproved:
        GET_APPROVED()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

    balanceOf:
        BALANCE_OF()
    ownerOf:
        OWNER_OF()
}